// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: Q__7rNO8ygE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: KhBkDGlzke/component
import Menubar from "../../Menubar"; // plasmic-import: bkX_qKyhqs/component
import MnItem from "../../MnItem"; // plasmic-import: OUU_m6iRfO/component
import NewstakingPopup from "../../NewstakingPopup"; // plasmic-import: 6NrxLI77CT/component
import Footer from "../../Footer"; // plasmic-import: oeSuO0WaA0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicNewstaking.module.css"; // plasmic-import: Q__7rNO8ygE/css

import ArrowBackSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowBackSvgrepoComsvg"; // plasmic-import: d52nSnJ8C_/icon

export type PlasmicNewstaking__VariantMembers = {};

export type PlasmicNewstaking__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewstaking__VariantsArgs;
export const PlasmicNewstaking__VariantProps = new Array<VariantPropType>();

export type PlasmicNewstaking__ArgsType = {};
type ArgPropType = keyof PlasmicNewstaking__ArgsType;
export const PlasmicNewstaking__ArgProps = new Array<ArgPropType>();

export type PlasmicNewstaking__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  contentWrapper?: p.Flex<"section">;
  content?: p.Flex<"div">;
  head?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  h1?: p.Flex<"h1">;
  menubar?: p.Flex<typeof Menubar>;
  mnItem?: p.Flex<typeof MnItem>;
  newstakingPopup?: p.Flex<typeof NewstakingPopup>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultNewstakingProps {}

function PlasmicNewstaking__RenderFunc(props: {
  variants: PlasmicNewstaking__VariantsArgs;
  args: PlasmicNewstaking__ArgsType;
  overrides: PlasmicNewstaking__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"contentWrapper"}
            data-plasmic-override={overrides.contentWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentWrapper)}
          >
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                data-plasmic-name={"head"}
                data-plasmic-override={overrides.head}
                className={classNames(projectcss.all, sty.head)}
              >
                <div className={classNames(projectcss.all, sty.column__vjTXv)}>
                  {true ? (
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__bcniP
                      )}
                      component={Link}
                      href={`/`}
                      platform={"nextjs"}
                    >
                      <ArrowBackSvgrepoComsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"New Staking"}
                      </h1>
                    </p.Stack>
                  ) : null}
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.column__bawzp)}
                  >
                    <Menubar
                      data-plasmic-name={"menubar"}
                      data-plasmic-override={overrides.menubar}
                      className={classNames("__wab_instance", sty.menubar)}
                      dashboard={
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ne0P8
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          <MnItem
                            data-plasmic-name={"mnItem"}
                            data-plasmic-override={overrides.mnItem}
                            className={classNames("__wab_instance", sty.mnItem)}
                            isActive={true}
                          >
                            {"Dashboard"}
                          </MnItem>
                        </p.PlasmicLink>
                      }
                    />
                  </div>
                ) : null}
              </div>

              <NewstakingPopup
                data-plasmic-name={"newstakingPopup"}
                data-plasmic-override={overrides.newstakingPopup}
                className={classNames("__wab_instance", sty.newstakingPopup)}
              />
            </div>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "contentWrapper",
    "content",
    "head",
    "svg",
    "h1",
    "menubar",
    "mnItem",
    "newstakingPopup",
    "footer"
  ],
  navbar: ["navbar"],
  contentWrapper: [
    "contentWrapper",
    "content",
    "head",
    "svg",
    "h1",
    "menubar",
    "mnItem",
    "newstakingPopup"
  ],
  content: [
    "content",
    "head",
    "svg",
    "h1",
    "menubar",
    "mnItem",
    "newstakingPopup"
  ],
  head: ["head", "svg", "h1", "menubar", "mnItem"],
  svg: ["svg"],
  h1: ["h1"],
  menubar: ["menubar", "mnItem"],
  mnItem: ["mnItem"],
  newstakingPopup: ["newstakingPopup"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  contentWrapper: "section";
  content: "div";
  head: "div";
  svg: "svg";
  h1: "h1";
  menubar: typeof Menubar;
  mnItem: typeof MnItem;
  newstakingPopup: typeof NewstakingPopup;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewstaking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewstaking__VariantsArgs;
    args?: PlasmicNewstaking__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewstaking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewstaking__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewstaking__ArgProps,
          internalVariantPropNames: PlasmicNewstaking__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewstaking__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewstaking";
  } else {
    func.displayName = `PlasmicNewstaking.${nodeName}`;
  }
  return func;
}

export const PlasmicNewstaking = Object.assign(
  // Top-level PlasmicNewstaking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    content: makeNodeComponent("content"),
    head: makeNodeComponent("head"),
    svg: makeNodeComponent("svg"),
    h1: makeNodeComponent("h1"),
    menubar: makeNodeComponent("menubar"),
    mnItem: makeNodeComponent("mnItem"),
    newstakingPopup: makeNodeComponent("newstakingPopup"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicNewstaking
    internalVariantProps: PlasmicNewstaking__VariantProps,
    internalArgProps: PlasmicNewstaking__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewstaking;
/* prettier-ignore-end */
