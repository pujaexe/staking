// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: AHVlMwmS1K
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicAgregate.module.css"; // plasmic-import: AHVlMwmS1K/css

import UsdtSvgrepoComsvgIcon from "./icons/PlasmicIcon__UsdtSvgrepoComsvg"; // plasmic-import: Tj7RwiE503/icon

export type PlasmicAgregate__VariantMembers = {};

export type PlasmicAgregate__VariantsArgs = {};
type VariantPropType = keyof PlasmicAgregate__VariantsArgs;
export const PlasmicAgregate__VariantProps = new Array<VariantPropType>();

export type PlasmicAgregate__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAgregate__ArgsType;
export const PlasmicAgregate__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicAgregate__OverridesType = {
  root?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  h6?: p.Flex<"h6">;
};

export interface DefaultAgregateProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicAgregate__RenderFunc(props: {
  variants: PlasmicAgregate__VariantsArgs;
  args: PlasmicAgregate__ArgsType;
  overrides: PlasmicAgregate__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lAdC)}>
        <div className={classNames(projectcss.all, sty.freeBox__dLdp4)}>
          {p.renderPlasmicSlot({
            defaultContents: "Total Assets",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
      </div>

      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(projectcss.all, projectcss.h4, sty.h4)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1Y1Mx)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <UsdtSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__icpTw)}
                role={"img"}
              />
            ),

            value: args.slot3
          })}

          {p.renderPlasmicSlot({
            defaultContents: "0.01661806",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </p.Stack>
      </h4>

      <h6
        data-plasmic-name={"h6"}
        data-plasmic-override={overrides.h6}
        className={classNames(projectcss.all, projectcss.h6, sty.h6)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__d4CM7)}>
          {p.renderPlasmicSlot({
            defaultContents: "â‰ˆ 246.7 IDR",
            value: args.slot2,
            className: classNames(sty.slotTargetSlot2)
          })}
        </div>
      </h6>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "h6"],
  h4: ["h4"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAgregate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAgregate__VariantsArgs;
    args?: PlasmicAgregate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAgregate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAgregate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAgregate__ArgProps,
          internalVariantPropNames: PlasmicAgregate__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAgregate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAgregate";
  } else {
    func.displayName = `PlasmicAgregate.${nodeName}`;
  }
  return func;
}

export const PlasmicAgregate = Object.assign(
  // Top-level PlasmicAgregate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicAgregate
    internalVariantProps: PlasmicAgregate__VariantProps,
    internalArgProps: PlasmicAgregate__ArgProps
  }
);

export default PlasmicAgregate;
/* prettier-ignore-end */
