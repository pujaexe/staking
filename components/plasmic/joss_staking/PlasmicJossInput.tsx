// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: 6iPH0Hbouv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TokenBadge from "../../TokenBadge"; // plasmic-import: S6Z_TKmeGm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicJossInput.module.css"; // plasmic-import: 6iPH0Hbouv/css

import SearchNormal1SvgIcon from "./icons/PlasmicIcon__SearchNormal1Svg"; // plasmic-import: 5dbkSlaxcG/icon
import EyesvgIcon from "./icons/PlasmicIcon__Eyesvg"; // plasmic-import: dGVFyYsNiw/icon

export type PlasmicJossInput__VariantMembers = {
  isFilled: "isFilled";
  isLeftIcon: "isLeftIcon";
  isRightIcon: "isRightIcon";
  hasButton: "hasButton";
  hasTokenBadge: "hasTokenBadge";
};

export type PlasmicJossInput__VariantsArgs = {
  isFilled?: SingleBooleanChoiceArg<"isFilled">;
  isLeftIcon?: SingleBooleanChoiceArg<"isLeftIcon">;
  isRightIcon?: SingleBooleanChoiceArg<"isRightIcon">;
  hasButton?: SingleBooleanChoiceArg<"hasButton">;
  hasTokenBadge?: SingleBooleanChoiceArg<"hasTokenBadge">;
};

type VariantPropType = keyof PlasmicJossInput__VariantsArgs;
export const PlasmicJossInput__VariantProps = new Array<VariantPropType>(
  "isFilled",
  "isLeftIcon",
  "isRightIcon",
  "hasButton",
  "hasTokenBadge"
);

export type PlasmicJossInput__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicJossInput__ArgsType;
export const PlasmicJossInput__ArgProps = new Array<ArgPropType>("children");

export type PlasmicJossInput__OverridesType = {
  root?: p.Flex<"div">;
  leftIcon?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  tokenbadge?: p.Flex<"div">;
  tokenBadge?: p.Flex<typeof TokenBadge>;
  rightIcon?: p.Flex<"div">;
};

export interface DefaultJossInputProps {
  children?: React.ReactNode;
  isFilled?: SingleBooleanChoiceArg<"isFilled">;
  isLeftIcon?: SingleBooleanChoiceArg<"isLeftIcon">;
  isRightIcon?: SingleBooleanChoiceArg<"isRightIcon">;
  hasButton?: SingleBooleanChoiceArg<"hasButton">;
  hasTokenBadge?: SingleBooleanChoiceArg<"hasTokenBadge">;
  className?: string;
}

function PlasmicJossInput__RenderFunc(props: {
  variants: PlasmicJossInput__VariantsArgs;
  args: PlasmicJossInput__ArgsType;
  overrides: PlasmicJossInput__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.roothasButton]: hasVariant(variants, "hasButton", "hasButton"),
            [sty.rootisFilled]: hasVariant(variants, "isFilled", "isFilled"),
            [sty.rootisLeftIcon]: hasVariant(
              variants,
              "isLeftIcon",
              "isLeftIcon"
            )
          }
        )}
      >
        {(hasVariant(variants, "isLeftIcon", "isLeftIcon") ? true : true) ? (
          <div
            data-plasmic-name={"leftIcon"}
            data-plasmic-override={overrides.leftIcon}
            className={classNames(projectcss.all, sty.leftIcon, {
              [sty.leftIconisLeftIcon]: hasVariant(
                variants,
                "isLeftIcon",
                "isLeftIcon"
              )
            })}
          >
            <SearchNormal1SvgIcon
              className={classNames(projectcss.all, sty.svg__oxf10)}
              role={"img"}
            />
          </div>
        ) : null}

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxhasButton]: hasVariant(
              variants,
              "hasButton",
              "hasButton"
            ),
            [sty.freeBoxhasTokenBadge]: hasVariant(
              variants,
              "hasTokenBadge",
              "hasTokenBadge"
            ),
            [sty.freeBoxisFilled]: hasVariant(variants, "isFilled", "isFilled"),
            [sty.freeBoxisLeftIcon]: hasVariant(
              variants,
              "isLeftIcon",
              "isLeftIcon"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <input
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.textInput__x0NrN
                )}
                placeholder={"Min. 100" as const}
                size={1 as const}
                type={"text" as const}
                value={"" as const}
              />
            ),

            value: args.children
          })}
        </div>

        {(
          hasVariant(variants, "hasTokenBadge", "hasTokenBadge")
            ? true
            : hasVariant(variants, "isRightIcon", "isRightIcon")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"tokenbadge"}
            data-plasmic-override={overrides.tokenbadge}
            className={classNames(projectcss.all, sty.tokenbadge, {
              [sty.tokenbadgehasTokenBadge]: hasVariant(
                variants,
                "hasTokenBadge",
                "hasTokenBadge"
              ),
              [sty.tokenbadgeisRightIcon]: hasVariant(
                variants,
                "isRightIcon",
                "isRightIcon"
              )
            })}
          >
            {true ? (
              <TokenBadge
                data-plasmic-name={"tokenBadge"}
                data-plasmic-override={overrides.tokenBadge}
                className={classNames("__wab_instance", sty.tokenBadge)}
              />
            ) : null}
          </div>
        ) : null}
        {(hasVariant(variants, "hasButton", "hasButton") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__lC3I, {
              [sty.freeBoxhasButton__lC3IoYghW]: hasVariant(
                variants,
                "hasButton",
                "hasButton"
              )
            })}
          >
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button__jrcup
              )}
            >
              {"MAX"}
            </button>
          </div>
        ) : null}
        {(hasVariant(variants, "isRightIcon", "isRightIcon") ? true : true) ? (
          <div
            data-plasmic-name={"rightIcon"}
            data-plasmic-override={overrides.rightIcon}
            className={classNames(projectcss.all, sty.rightIcon, {
              [sty.rightIconisRightIcon]: hasVariant(
                variants,
                "isRightIcon",
                "isRightIcon"
              )
            })}
          >
            <EyesvgIcon
              className={classNames(projectcss.all, sty.svg__oZiKz)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftIcon",
    "freeBox",
    "tokenbadge",
    "tokenBadge",
    "rightIcon"
  ],
  leftIcon: ["leftIcon"],
  freeBox: ["freeBox"],
  tokenbadge: ["tokenbadge", "tokenBadge"],
  tokenBadge: ["tokenBadge"],
  rightIcon: ["rightIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftIcon: "div";
  freeBox: "div";
  tokenbadge: "div";
  tokenBadge: typeof TokenBadge;
  rightIcon: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJossInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJossInput__VariantsArgs;
    args?: PlasmicJossInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJossInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicJossInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicJossInput__ArgProps,
          internalVariantPropNames: PlasmicJossInput__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicJossInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJossInput";
  } else {
    func.displayName = `PlasmicJossInput.${nodeName}`;
  }
  return func;
}

export const PlasmicJossInput = Object.assign(
  // Top-level PlasmicJossInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftIcon: makeNodeComponent("leftIcon"),
    freeBox: makeNodeComponent("freeBox"),
    tokenbadge: makeNodeComponent("tokenbadge"),
    tokenBadge: makeNodeComponent("tokenBadge"),
    rightIcon: makeNodeComponent("rightIcon"),

    // Metadata about props expected for PlasmicJossInput
    internalVariantProps: PlasmicJossInput__VariantProps,
    internalArgProps: PlasmicJossInput__ArgProps
  }
);

export default PlasmicJossInput;
/* prettier-ignore-end */
