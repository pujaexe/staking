// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: am2tPD21YWI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: KhBkDGlzke/component
import Menubar from "../../Menubar"; // plasmic-import: bkX_qKyhqs/component
import MnItem from "../../MnItem"; // plasmic-import: OUU_m6iRfO/component
import Agregate from "../../Agregate"; // plasmic-import: AHVlMwmS1K/component
import CardPortfolio from "../../CardPortfolio"; // plasmic-import: _AASYWCDRo0/component
import Footer from "../../Footer"; // plasmic-import: oeSuO0WaA0/component

import { useScreenVariants as useScreenVariantsyddWx7I3Gw2DK } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YddWx7I3Gw2dK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicPorfolio.module.css"; // plasmic-import: am2tPD21YWI/css

import UsdtSvgrepoComsvgIcon from "./icons/PlasmicIcon__UsdtSvgrepoComsvg"; // plasmic-import: Tj7RwiE503/icon

export type PlasmicPorfolio__VariantMembers = {};

export type PlasmicPorfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicPorfolio__VariantsArgs;
export const PlasmicPorfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicPorfolio__ArgsType = {};
type ArgPropType = keyof PlasmicPorfolio__ArgsType;
export const PlasmicPorfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicPorfolio__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  contentWrapper?: p.Flex<"section">;
  content?: p.Flex<"div">;
  head?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  menubar?: p.Flex<typeof Menubar>;
  dataAgregate?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  portoflioWapper?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  productList?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPorfolioProps {}

function PlasmicPorfolio__RenderFunc(props: {
  variants: PlasmicPorfolio__VariantsArgs;
  args: PlasmicPorfolio__ArgsType;
  overrides: PlasmicPorfolio__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyddWx7I3Gw2DK()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"contentWrapper"}
            data-plasmic-override={overrides.contentWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentWrapper)}
          >
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                data-plasmic-name={"head"}
                data-plasmic-override={overrides.head}
                className={classNames(projectcss.all, sty.head)}
              >
                <div className={classNames(projectcss.all, sty.column__pwkXy)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Portfolio"}
                  </h1>
                </div>

                <div className={classNames(projectcss.all, sty.column__ol51Q)}>
                  <Menubar
                    data-plasmic-name={"menubar"}
                    data-plasmic-override={overrides.menubar}
                    className={classNames("__wab_instance", sty.menubar)}
                    dashboard={
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__sv9CJ
                        )}
                        component={Link}
                        href={`/`}
                        platform={"nextjs"}
                      >
                        <MnItem
                          className={classNames(
                            "__wab_instance",
                            sty.mnItem__txZqe
                          )}
                        >
                          {"Dashboard"}
                        </MnItem>
                      </p.PlasmicLink>
                    }
                    portfolio={
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___6Xxak
                        )}
                        component={Link}
                        href={`/portfolio`}
                        platform={"nextjs"}
                      >
                        <MnItem
                          className={classNames(
                            "__wab_instance",
                            sty.mnItem__zjojW
                          )}
                          isActive={true}
                        >
                          {"Portfolio"}
                        </MnItem>
                      </p.PlasmicLink>
                    }
                  />
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"dataAgregate"}
                data-plasmic-override={overrides.dataAgregate}
                hasGap={true}
                className={classNames(projectcss.all, sty.dataAgregate)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___2LAhh)}
                  >
                    <Agregate
                      className={classNames(
                        "__wab_instance",
                        sty.agregate__f1Ynq
                      )}
                      slot3={
                        true ? (
                          <UsdtSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cnZsY
                            )}
                            role={"img"}
                          />
                        ) : null
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__b72Eg)}
                  >
                    <Agregate
                      className={classNames(
                        "__wab_instance",
                        sty.agregate___3Fvm
                      )}
                      slot={"Total Reward"}
                      slot3={
                        true ? (
                          <UsdtSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__h8Fd
                            )}
                            role={"img"}
                          />
                        ) : null
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__xgrDf)}
                  >
                    <Agregate
                      className={classNames(
                        "__wab_instance",
                        sty.agregate__msZum
                      )}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wh7NZ
                          )}
                        >
                          {"Total Portfolio"}
                        </div>
                      }
                      slot2={
                        true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__b2SRm
                            )}
                          >
                            {""}
                          </div>
                        ) : null
                      }
                      slot3={
                        true ? (
                          <UsdtSvgrepoComsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rfk4B
                            )}
                            role={"img"}
                          />
                        ) : null
                      }
                    >
                      {"1"}
                    </Agregate>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ojacA)}
                  >
                    <Agregate
                      className={classNames(
                        "__wab_instance",
                        sty.agregate__qvevn
                      )}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iWjtz
                          )}
                        >
                          {"Wallet Balance"}
                        </div>
                      }
                      slot2={
                        true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vmNlH
                            )}
                          >
                            {""}
                          </div>
                        ) : null
                      }
                    >
                      {"1.000"}
                    </Agregate>
                  </div>
                </p.Stack>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"portoflioWapper"}
                  data-plasmic-override={overrides.portoflioWapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.portoflioWapper)}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"My Portfolio"}
                  </h3>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"productList"}
                    data-plasmic-override={overrides.productList}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.productList)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___8OsA7)}
                    >
                      {true ? (
                        <CardPortfolio
                          className={classNames(
                            "__wab_instance",
                            sty.cardPortfolio__lx7Ko
                          )}
                        />
                      ) : null}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__kOugd)}
                    >
                      {true ? (
                        <CardPortfolio
                          className={classNames(
                            "__wab_instance",
                            sty.cardPortfolio__mWqcC
                          )}
                        />
                      ) : null}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___0HaD2)}
                    >
                      {true ? (
                        <CardPortfolio
                          className={classNames(
                            "__wab_instance",
                            sty.cardPortfolio___4I0Pg
                          )}
                        />
                      ) : null}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__u3Sql)}
                    >
                      {true ? (
                        <CardPortfolio
                          className={classNames(
                            "__wab_instance",
                            sty.cardPortfolio__zcVKu
                          )}
                        />
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "contentWrapper",
    "content",
    "head",
    "h1",
    "menubar",
    "dataAgregate",
    "columns",
    "portoflioWapper",
    "h3",
    "productList",
    "footer"
  ],
  navbar: ["navbar"],
  contentWrapper: [
    "contentWrapper",
    "content",
    "head",
    "h1",
    "menubar",
    "dataAgregate",
    "columns",
    "portoflioWapper",
    "h3",
    "productList"
  ],
  content: [
    "content",
    "head",
    "h1",
    "menubar",
    "dataAgregate",
    "columns",
    "portoflioWapper",
    "h3",
    "productList"
  ],
  head: ["head", "h1", "menubar"],
  h1: ["h1"],
  menubar: ["menubar"],
  dataAgregate: ["dataAgregate", "columns"],
  columns: ["columns"],
  portoflioWapper: ["portoflioWapper", "h3", "productList"],
  h3: ["h3"],
  productList: ["productList"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  contentWrapper: "section";
  content: "div";
  head: "div";
  h1: "h1";
  menubar: typeof Menubar;
  dataAgregate: "div";
  columns: "div";
  portoflioWapper: "div";
  h3: "h3";
  productList: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPorfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPorfolio__VariantsArgs;
    args?: PlasmicPorfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPorfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPorfolio__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPorfolio__ArgProps,
          internalVariantPropNames: PlasmicPorfolio__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPorfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPorfolio";
  } else {
    func.displayName = `PlasmicPorfolio.${nodeName}`;
  }
  return func;
}

export const PlasmicPorfolio = Object.assign(
  // Top-level PlasmicPorfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    content: makeNodeComponent("content"),
    head: makeNodeComponent("head"),
    h1: makeNodeComponent("h1"),
    menubar: makeNodeComponent("menubar"),
    dataAgregate: makeNodeComponent("dataAgregate"),
    columns: makeNodeComponent("columns"),
    portoflioWapper: makeNodeComponent("portoflioWapper"),
    h3: makeNodeComponent("h3"),
    productList: makeNodeComponent("productList"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPorfolio
    internalVariantProps: PlasmicPorfolio__VariantProps,
    internalArgProps: PlasmicPorfolio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPorfolio;
/* prettier-ignore-end */
