// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: 6NrxLI77CT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Agregate from "../../Agregate"; // plasmic-import: AHVlMwmS1K/component
import JossInput from "../../JossInput"; // plasmic-import: 6iPH0Hbouv/component
import Checkbox from "../../Checkbox"; // plasmic-import: DR-iCwaS-p8/component
import Button from "../../Button"; // plasmic-import: FFfCEbgxQ4u/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicNewstakingPopup.module.css"; // plasmic-import: 6NrxLI77CT/css

import UsdtSvgrepoComsvgIcon from "./icons/PlasmicIcon__UsdtSvgrepoComsvg"; // plasmic-import: Tj7RwiE503/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zbgdUCmYfRL/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: OLfCWCE5DNn/icon

export type PlasmicNewstakingPopup__VariantMembers = {};

export type PlasmicNewstakingPopup__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewstakingPopup__VariantsArgs;
export const PlasmicNewstakingPopup__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNewstakingPopup__ArgsType = {
  productImage?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNewstakingPopup__ArgsType;
export const PlasmicNewstakingPopup__ArgProps = new Array<ArgPropType>(
  "productImage",
  "children",
  "slot"
);

export type PlasmicNewstakingPopup__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  title?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  body?: p.Flex<"div">;
  info?: p.Flex<"div">;
  remark?: p.Flex<"div">;
  numberInput?: p.Flex<"input">;
  amount?: p.Flex<"div">;
  rules?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultNewstakingPopupProps {
  productImage?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicNewstakingPopup__RenderFunc(props: {
  variants: PlasmicNewstakingPopup__VariantsArgs;
  args: PlasmicNewstakingPopup__ArgsType;
  overrides: PlasmicNewstakingPopup__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          hasGap={true}
          className={classNames(projectcss.all, sty.header)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__cxxez)}
                displayHeight={"90px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"90px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/joss_staking/images/wariorpng.png",
                  fullWidth: 90,
                  fullHeight: 90,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.productImage
          })}

          <p.Stack
            as={"div"}
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            hasGap={true}
            className={classNames(projectcss.all, sty.title)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(projectcss.all, projectcss.h3, sty.h3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__esFyi)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Warior Staking",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
            </h3>

            <div className={classNames(projectcss.all, sty.freeBox__d0Uiq)}>
              <div className={classNames(projectcss.all, sty.freeBox__motzy)}>
                {p.renderPlasmicSlot({
                  defaultContents: "üëç Low Risk",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(projectcss.all, sty.body)}
      >
        <div
          data-plasmic-name={"info"}
          data-plasmic-override={overrides.info}
          className={classNames(projectcss.all, sty.info)}
        >
          <Agregate
            className={classNames("__wab_instance", sty.agregate__o981Q)}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p9F0O
                )}
              >
                {"Minimum Deposit"}
              </div>
            }
            slot2={
              true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zwATe
                  )}
                >
                  {""}
                </div>
              ) : null
            }
          >
            {"1.000"}
          </Agregate>

          <Agregate
            className={classNames("__wab_instance", sty.agregate__qlLeE)}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yYqs
                )}
              >
                {"Duration"}
              </div>
            }
            slot2={
              true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__purIr
                  )}
                >
                  {""}
                </div>
              ) : null
            }
            slot3={
              true ? (
                <UsdtSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__jcShg)}
                  role={"img"}
                />
              ) : null
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yZfYs
              )}
            >
              {"60 Days"}
            </div>
          </Agregate>

          <Agregate
            className={classNames("__wab_instance", sty.agregate__cIYuK)}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vyHwg
                )}
              >
                {"Est. APY"}
              </div>
            }
            slot2={
              true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zhAh5
                  )}
                >
                  {""}
                </div>
              ) : null
            }
            slot3={
              true ? (
                <UsdtSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__qxAjd)}
                  role={"img"}
                />
              ) : null
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z1W7
              )}
            >
              {"+7%"}
            </div>
          </Agregate>
        </div>

        {true ? (
          <div
            data-plasmic-name={"remark"}
            data-plasmic-override={overrides.remark}
            className={classNames(projectcss.all, sty.remark)}
          >
            <label
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.label__aTesH
              )}
            >
              {"Remark"}
            </label>

            <JossInput
              className={classNames("__wab_instance", sty.jossInput__q4P9R)}
            >
              <input
                data-plasmic-name={"numberInput"}
                data-plasmic-override={overrides.numberInput}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numberInput
                )}
                placeholder={"Ex : Personal Investment" as const}
                size={1 as const}
                type={"number" as const}
                value={"" as const}
              />
            </JossInput>
          </div>
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"amount"}
            data-plasmic-override={overrides.amount}
            className={classNames(projectcss.all, sty.amount)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__cvLtH)}>
                <label
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label___5WArp
                  )}
                >
                  {"Amount to Buy"}
                </label>

                <label
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label__jPzH2
                  )}
                >
                  {"Available Balance "}
                </label>

                <label
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label___8Ncml
                  )}
                >
                  {"100 USDT"}
                </label>
              </div>
            ) : null}

            <JossInput
              className={classNames("__wab_instance", sty.jossInput__zvsO1)}
              hasButton={true}
              hasTokenBadge={true}
            />
          </div>
        ) : null}
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"rules"}
        data-plasmic-override={overrides.rules}
        hasGap={true}
        className={classNames(projectcss.all, sty.rules)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7PQsm
          )}
        >
          {"Rules"}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__taCuK)}>
          <label
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label__ml89X
            )}
          >
            {"Subscription Date"}
          </label>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gsAQi
            )}
          >
            {"2022/08/28"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__dfleT)}>
          <label
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label__s8Sh1
            )}
          >
            {"Profit Distribution Date"}
          </label>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yw4N
            )}
          >
            {"2022/08/28"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__krVdY)}>
          <label
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label__zgeIv
            )}
          >
            {"Profit Received"}
          </label>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bmSbH
            )}
          >
            {"Daily"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__skuPm)}>
          <label
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label__boOnL
            )}
          >
            {"POL Fees"}
          </label>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__anMYq
            )}
          >
            {"8%"}
          </div>
        </div>

        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vicD4
            )}
          >
            <React.Fragment>
              <React.Fragment>{"I have read and agree to the "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#004BFF" }}
              >
                {"Joss Stake Service Agreement"}
              </span>
            </React.Fragment>
          </div>
        </Checkbox>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          buttonId={"" as const}
          className={classNames("__wab_instance", sty.button)}
          color={"blue" as const}
          link={`/newstaking-confirmation`}
          shape={"rounded" as const}
        >
          {"Continue"}
        </Button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "title",
    "h3",
    "body",
    "info",
    "remark",
    "numberInput",
    "amount",
    "rules",
    "checkbox",
    "button"
  ],
  header: ["header", "title", "h3"],
  title: ["title", "h3"],
  h3: ["h3"],
  body: ["body", "info", "remark", "numberInput", "amount"],
  info: ["info"],
  remark: ["remark", "numberInput"],
  numberInput: ["numberInput"],
  amount: ["amount"],
  rules: ["rules", "checkbox", "button"],
  checkbox: ["checkbox"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  title: "div";
  h3: "h3";
  body: "div";
  info: "div";
  remark: "div";
  numberInput: "input";
  amount: "div";
  rules: "div";
  checkbox: typeof Checkbox;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewstakingPopup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewstakingPopup__VariantsArgs;
    args?: PlasmicNewstakingPopup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewstakingPopup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewstakingPopup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewstakingPopup__ArgProps,
          internalVariantPropNames: PlasmicNewstakingPopup__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewstakingPopup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewstakingPopup";
  } else {
    func.displayName = `PlasmicNewstakingPopup.${nodeName}`;
  }
  return func;
}

export const PlasmicNewstakingPopup = Object.assign(
  // Top-level PlasmicNewstakingPopup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    title: makeNodeComponent("title"),
    h3: makeNodeComponent("h3"),
    body: makeNodeComponent("body"),
    info: makeNodeComponent("info"),
    remark: makeNodeComponent("remark"),
    numberInput: makeNodeComponent("numberInput"),
    amount: makeNodeComponent("amount"),
    rules: makeNodeComponent("rules"),
    checkbox: makeNodeComponent("checkbox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNewstakingPopup
    internalVariantProps: PlasmicNewstakingPopup__VariantProps,
    internalArgProps: PlasmicNewstakingPopup__ArgProps
  }
);

export default PlasmicNewstakingPopup;
/* prettier-ignore-end */
