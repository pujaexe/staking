// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6jdiTgRhkYQJ2zXFv6Yaw9
// Component: _AASYWCDRo0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: FFfCEbgxQ4u/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_joss_staking.module.css"; // plasmic-import: 6jdiTgRhkYQJ2zXFv6Yaw9/projectcss
import sty from "./PlasmicCardPortfolio.module.css"; // plasmic-import: _AASYWCDRo0/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: zbgdUCmYfRL/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: OLfCWCE5DNn/icon

export type PlasmicCardPortfolio__VariantMembers = {};

export type PlasmicCardPortfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardPortfolio__VariantsArgs;
export const PlasmicCardPortfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicCardPortfolio__ArgsType = {};
type ArgPropType = keyof PlasmicCardPortfolio__ArgsType;
export const PlasmicCardPortfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicCardPortfolio__OverridesType = {
  root?: p.Flex<"div">;
  portfolioCard?: p.Flex<"div">;
  imgHolder?: p.Flex<"div">;
  circleouter?: p.Flex<"div">;
  circleinner?: p.Flex<"div">;
  productImage2?: p.Flex<typeof p.PlasmicImg>;
  portfolioHead?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  potfolioDetails?: p.Flex<"div">;
  earn?: p.Flex<"div">;
  loading?: p.Flex<"div">;
  times?: p.Flex<"div">;
};

export interface DefaultCardPortfolioProps {
  className?: string;
}

function PlasmicCardPortfolio__RenderFunc(props: {
  variants: PlasmicCardPortfolio__VariantsArgs;
  args: PlasmicCardPortfolio__ArgsType;
  overrides: PlasmicCardPortfolio__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"portfolioCard"}
          data-plasmic-override={overrides.portfolioCard}
          className={classNames(projectcss.all, sty.portfolioCard)}
        >
          <div
            data-plasmic-name={"imgHolder"}
            data-plasmic-override={overrides.imgHolder}
            className={classNames(projectcss.all, sty.imgHolder)}
          >
            {true ? (
              <div
                data-plasmic-name={"circleouter"}
                data-plasmic-override={overrides.circleouter}
                className={classNames(projectcss.all, sty.circleouter)}
              >
                {true ? (
                  <div
                    data-plasmic-name={"circleinner"}
                    data-plasmic-override={overrides.circleinner}
                    className={classNames(projectcss.all, sty.circleinner)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"productImage2"}
                      data-plasmic-override={overrides.productImage2}
                      alt={""}
                      className={classNames(sty.productImage2)}
                      displayHeight={"120px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/joss_staking/images/wariorpng.png",
                        fullWidth: 90,
                        fullHeight: 90,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"portfolioHead"}
            data-plasmic-override={overrides.portfolioHead}
            hasGap={true}
            className={classNames(projectcss.all, sty.portfolioHead)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Tabungan Pensiun"}
            </h3>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lWhqE
              )}
            >
              {"Warior Staking"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"potfolioDetails"}
            data-plasmic-override={overrides.potfolioDetails}
            hasGap={true}
            className={classNames(projectcss.all, sty.potfolioDetails)}
          >
            <div
              data-plasmic-name={"earn"}
              data-plasmic-override={overrides.earn}
              className={classNames(projectcss.all, sty.earn)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__evF
                )}
              >
                {"Earned"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8EB91
                )}
              >
                {"20 USDT"}
              </div>
            </div>

            <div
              data-plasmic-name={"loading"}
              data-plasmic-override={overrides.loading}
              className={classNames(projectcss.all, sty.loading)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hCa0Q)} />
            </div>

            <div
              data-plasmic-name={"times"}
              data-plasmic-override={overrides.times}
              className={classNames(projectcss.all, sty.times)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xfNsB
                )}
              >
                {"Time Staked"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wphao
                )}
              >
                {"10/60Days"}
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8RAq2)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__fjb8P)}
              color={"softBlue" as const}
              shape={"rounded" as const}
            >
              {"Unstake"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__fwR7V)}
              color={"blue" as const}
              shape={"rounded" as const}
            >
              {"Claim"}
            </Button>
          </p.Stack>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "portfolioCard",
    "imgHolder",
    "circleouter",
    "circleinner",
    "productImage2",
    "portfolioHead",
    "h3",
    "potfolioDetails",
    "earn",
    "loading",
    "times"
  ],
  portfolioCard: [
    "portfolioCard",
    "imgHolder",
    "circleouter",
    "circleinner",
    "productImage2",
    "portfolioHead",
    "h3",
    "potfolioDetails",
    "earn",
    "loading",
    "times"
  ],
  imgHolder: ["imgHolder", "circleouter", "circleinner", "productImage2"],
  circleouter: ["circleouter", "circleinner", "productImage2"],
  circleinner: ["circleinner", "productImage2"],
  productImage2: ["productImage2"],
  portfolioHead: ["portfolioHead", "h3"],
  h3: ["h3"],
  potfolioDetails: ["potfolioDetails", "earn", "loading", "times"],
  earn: ["earn"],
  loading: ["loading"],
  times: ["times"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  portfolioCard: "div";
  imgHolder: "div";
  circleouter: "div";
  circleinner: "div";
  productImage2: typeof p.PlasmicImg;
  portfolioHead: "div";
  h3: "h3";
  potfolioDetails: "div";
  earn: "div";
  loading: "div";
  times: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardPortfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardPortfolio__VariantsArgs;
    args?: PlasmicCardPortfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardPortfolio__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardPortfolio__ArgProps,
          internalVariantPropNames: PlasmicCardPortfolio__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCardPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPortfolio";
  } else {
    func.displayName = `PlasmicCardPortfolio.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPortfolio = Object.assign(
  // Top-level PlasmicCardPortfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    portfolioCard: makeNodeComponent("portfolioCard"),
    imgHolder: makeNodeComponent("imgHolder"),
    circleouter: makeNodeComponent("circleouter"),
    circleinner: makeNodeComponent("circleinner"),
    productImage2: makeNodeComponent("productImage2"),
    portfolioHead: makeNodeComponent("portfolioHead"),
    h3: makeNodeComponent("h3"),
    potfolioDetails: makeNodeComponent("potfolioDetails"),
    earn: makeNodeComponent("earn"),
    loading: makeNodeComponent("loading"),
    times: makeNodeComponent("times"),

    // Metadata about props expected for PlasmicCardPortfolio
    internalVariantProps: PlasmicCardPortfolio__VariantProps,
    internalArgProps: PlasmicCardPortfolio__ArgProps
  }
);

export default PlasmicCardPortfolio;
/* prettier-ignore-end */
